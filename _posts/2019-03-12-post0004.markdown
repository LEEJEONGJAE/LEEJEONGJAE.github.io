---
layout: post
title:  "[0004][nodejs] npm 사용하기"
date:   2019-03-12
---

**0. what is npm?**
<br>
**=> node pakage manager**
<br>
**=> nodejs에서 다양한 모듈들을 사용할 수 있게 해주는 기능**
<br>
<br>
**1. npm 설치하기**
<ul class="circle lm20">
  <li>'npm install [pakage명]' : 패키지명을 입력하면 해당 패키지가 설치됨
    <pre><code class="language-node">> npm install pm2</code></pre>
  </li>
  <li>pakage.json파일이 있는 경로에서 'npm install'<br>
    => pakage.json파일에 설정된 pakage들을 체크하여 자동으로 설치해준다.
    <pre><code class="language-node">> npm install</code></pre>
  </li>
</ul>

**2. pm2(서버관리 패키지) 사용하기**
<ul class="circle lm20">
  <li>pm2 : 프로세스관리패키지(process manager)</li>
  <li>url : http://pm2.keymetrics.io</li>
  <li>프로세스(웹서버)를 편리하게 관리할 수 있다.</li>
  <li>pm2 설치
    <ul class="disc lm30">
      <li>윈도우 : 관리자권한으로 cmd 실행 > 'npm install pm2 -g'
        <pre><code class="language-node">> npm install pm2 -g</code></pre>
      </li>
      <li>리눅스 : 'sudo npm install pm2 -g'<br>
        (* '-g'는 global의 약자로 어디에서는 pm2를 실행가능하게끔 해준다. )
        <pre><code class="language-node">> sudo npm install pm2 -g</code></pre>
      </li>        
    </ul>
  </li>
  <li>pm2 주요명령어
    <ul class="disc lm30">
      <li>웹서버 실행 : 'pm2 start main.js --watch'<br>
        ('--watch'옵션은 hot deploy 기능을 의미함, 'pm2 start main.js'만으로도 서버실행은 가능.)
        <pre><code class="language-node">> pm2 start main.js --watch</code></pre>
      </li>
      <li>웹서버 종료 : 'pm2 stop main'<br>
        ('main'은 서버실행시 표시되는 정보 중 name을 입력.)
        <pre><code class="language-node">> pm2 stop main</code></pre>
      </li>
      <li>웹서버 모니터 : 'pm2 monit'<br>
        (어떤 프로세스가 실행중인지 확인할 수 있다.)
        <pre><code class="language-node">> pm2 monit</code></pre>
      </li> 
      <li>웹서버 로그 확인 : 'pm2 log'<br>
        (어떤 프로세스가 실행중인지 확인할 수 있다.)
        <pre><code class="language-node">> pm2 log</code></pre>
      </li>        
    </ul>
  </li>  
</ul>

**3. Express 사용하기**
<ul class="circle lm20">
  <li>Express : 가장 대표적인 웹프레임워크(WebFrameworks) 중 하나</li>
  <li>url : https://expressjs.com/ko/</li>
  <li>자주사용하는 기본적인 기능들을 포함한 프레임워크이다.</li>
  <li>Express 설치 : 'npm install express -g' 입력<br>
    => express를 전역(-g)에서 사용할 수 있도록 설치
    <pre><code class="language-node">> npm install express -g</code></pre>
  </li>
  <li>'express [app명]' 실행<br>
    => 현재 경로에서 [app명]으로 app를 생성한다.
    => 하위 내용은 자동으로 생성된다.
    <pre><code class="language-node">> express myapp</code></pre>
  </li>
  <li>express 구조
    <ul class="disc lm30">
      <li>package.json : app에서 사용될 모듈들의 정보를 설정하는 파일<br>
        (maven의 pom.xml의 역할을 하는 설정파일로 보임)
        <pre><code class="language-xml">
{
  "name": "myapp",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www"
  },
  "dependencies": {
    "cookie-parser": "~1.4.3",
    "debug": "~2.6.9",
    "express": "~4.16.0",
    "http-errors": "~1.6.2",
    "jade": "~1.11.0",
    "morgan": "~1.9.0"
  }
}
</code></pre>
      </li>
      <li>bin/www : 서버구동을 위한 코드가 기록되어있다.<br>
      => 익스프레스 서버설정이 코딩된 app.js파일을 가져와 node의 HTTP객체와 연동하는 작업이 이뤄진다.
      </li>
      <li>app.js : 익스프레스 설정이 코딩된 파일(bin/www 에서 사용됨)
        <ul class="circle lm30">
          <li>morgan : 클라이언트의 HTTP요청정보를 로깅하기 위한 모듈</li>
          <li>body-parser : 클라이언트의 HTTP요청 중 POST요청의 body데이터에 접근하기 위한 모듈</li>
          <li>cookie-parser : 접속한 클라이언트의 쿠키정보에 접근하기 위한 모듈</li>
          <li>express.static() : 정적파일호스팅을 위한 경로설정</li>
          <li>app.use('/', routes) : 라우팅 설정. 세부라우팅은 '/routes'폴더에 구현됨</li>
        </ul>
      </li>
    </ul>
  </li>  
</ul>

**정리**
<div class="summary">
   <ul>
     <li>단 한줄의 명령어로 간단하게 npm을 설치할 수 있다.</li>
     <li>npm은 굉장히 다양해서 많이 사용해봐야 알 것 같다.</li>
     <li>pm2를 사용하면 디버깅도 편리하고 hotdeploy(--watch)기능이 포함되서 편리하다.</li>
     <li>express는 자바에서 Spring을 사용할때만큼 편리하게 느껴진다.</li>
     <li>express를 사용하여 자동으로 생성되는 파일들을 보니 어느정도 구조가 보여서 약간은 더 익숙해진 느낌이다.</li>
   </ul>
</div>
